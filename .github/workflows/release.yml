name: Release-CI

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

permissions:
  contents: read

env:
  DART_VERSION: '2.14.4'
  DART_WORKSPACE: ${{ github.workspace }}/discovery_engine

jobs:
  release:
    name: release
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@3c9b0fc6f2d223b8450b02a0445f526350fc73e0 # v2.3.1
        with:
          key: ${{ secrets.SSH }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install dart
        uses: dart-lang/setup-dart@6a218f2413a3e78e9087f638a238f6b40893203d # v1.3
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.DART_WORKSPACE }}
        run: dart pub get

      - name: Other Dart code generation
        working-directory: ${{ env.DART_WORKSPACE }}
        run: dart run build_runner build

      - name: Get current branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: current_branch

      - name: Copy Repository
        shell: bash
        run: |
          # Create a temporary folder to clone the other repo
          CLONE_DIR=$(mktemp -d)
          DST_REPO='xaynetwork/xayn_discovery_engine_release'
          EMAIL='ci@xayn.com'
          USERNAME='ci'
          BRANCH=${{ steps.current_branch.outputs.branch }}
          SRC_COMMIT=$(git rev-parse HEAD)
          SRC_COMMIT_MSG=$(git log --format=%B -n1)
          git config --global user.email $EMAIL
          git config --global user.name $USERNAME
          # Check if the branch exists, if so, clone using the existing branch,
          # if not, clone using the default branch and let git push to send to the right branch
          BRANCH_EXISTS=$(git ls-remote --heads "git@github.com:$DST_REPO.git" $BRANCH | wc -l);
          if [ $BRANCH_EXISTS -eq 0 ];then
            git clone --depth 1 "git@github.com:$DST_REPO.git" $CLONE_DIR
          else
            git clone -b $BRANCH --depth 1 "git@github.com:$DST_REPO.git" $CLONE_DIR;
          fi
          cd $CLONE_DIR
          # Cleaning all files on the destination repository
          # --ignore-unmatch avoid to fail if the repository is empty
          git rm --ignore-unmatch -r .
          rsync -a --exclude example ${{ env.DART_WORKSPACE }}/ .
          # Remove files from .gitignore that needs to be uploaded to the release repo
          sed -i -e '/DELETE_AFTER_THIS_IN_RELEASE/,$d' .gitignore
          git add -A
          # Commit only if something changed
          if [ $(git status --porcelain | wc -l) -gt 0 ]; then
            git commit --message "$SRC_COMMIT_MSG
            https://github.com/xaynetwork/xayn_discovery_engine/commit/$SRC_COMMIT
            https://github.com/xaynetwork/xayn_discovery_engine/tree/$BRANCH"
            git push -u origin HEAD:$BRANCH
          fi
