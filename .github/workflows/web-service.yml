name: Web Service Release

on:
  workflow_dispatch:
    inputs:
      model_name:
        type: string
        default: 'smbert'
        description: Name of the model name to use
      model_version:
        type: string
        default: 'v0003'
        description: Name of the model version to use
      platform:
        description: Platform to build the image for (arm64 or amd64)
        type: choice
        default: 'arm64'
        options:
          - arm64
          - amd64
      tag:
        type: string
        description: >
          A tag for image identification. This override the default.
          Default is <branch>-<timestamp>-<commit hash>-<model_name>_<model_version>-<platform>.
          Step 'Images name' will print the name of the generated images.

permissions:
  contents: read

env:
  DENY_WARNINGS: false
  frontoffice_archive: "web-service-frontoffice"
  backoffice_archive: "web-service-backoffice"

jobs:
  services-build:
    runs-on: hetzner-pm
    container:
      image: xaynetci/yellow:v12
    timeout-minutes: 30
    permissions:
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0

      - name: Set up aarch64 environment
        if: inputs.platform == 'arm64'
        shell: bash
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

          apt update -y && apt upgrade -y
          apt install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross

          rustup target add aarch64-unknown-linux-gnu

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: eu-central-1

      - name: Setup the CI.
        uses: ./.github/actions/setup-job-docker

      - name: Download assets
        run: just download-assets ${{ inputs.model_name }} ${{ inputs.model_version }}

      - name: Create backoffice artifact
        uses: ./.github/actions/release_artifact
        with:
          platform: ${{ inputs.platform }}
          bin_name: "ingestion"
          archive_name: ${{ env.backoffice_archive }}
          model_full_name: ${{ inputs.model_name }}_${{ inputs.model_version }}

      - name: Create frontoffice artifact
        uses: ./.github/actions/release_artifact
        with:
          platform: ${{ inputs.platform }}
          bin_name: "personalization"
          archive_name: ${{ env.frontoffice_archive }}
          model_full_name: ${{ inputs.model_name }}_${{ inputs.model_version }}

  docker-build:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    needs: services-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0

      - name: Set up QEMU
        if: inputs.platform == 'arm64'
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2.1.0
        with:
          platforms: ${{ inputs.platform }}

      - name: Images name
        run: |
          TAG=${{ github.event.inputs.tag }}
          if [ -z "$TAG" ]; then
            TAG="$(git rev-parse --abbrev-ref HEAD)"
            TAG="$TAG-$(date +"%y%W%u%H%M%S")"
            TAG="$TAG-$(git rev-parse --abbrev-ref HEAD)"
            TAG="$TAG-$(git rev-parse --short HEAD)"
            TAG="$TAG-${{ inputs.model_name}}_${{ inputs.model_version }}"
            TAG="$TAG-${{ inputs.platform }}"
          fi
          frontoffice_image_name="xaynetci/xayn_discovery_web_service:$TAG"
          backoffice_image_name="xaynetci/xayn_discovery_ingestion_service:$TAG"
          echo "frontoffice_image_name=$frontoffice_image_name" >> $GITHUB_ENV
          echo "backoffice_image_name=$backoffice_image_name" >> $GITHUB_ENV

          echo "frontoffice image: $frontoffice_image_name"
          echo "backoffice image:  $backoffice_image_name"

      - name: Create backoffice docker image
        uses: ./.github/actions/release_image
        with:
          archive_name: ${{ env.backoffice_archive }}
          image_name: ${{ env.backoffice_image_name }}
          platform: ${{ inputs.platform }}

      - name: Create frontoffice docker image
        uses: ./.github/actions/release_image
        with:
          archive_name: ${{ env.frontoffice_archive }}
          image_name: ${{ env.frontoffice_image_name }}
          platform: ${{ inputs.platform }}

      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Push images
        run: |
          echo "docker push ${{ env.frontoffice_image_name }}"
          echo "docker push ${{ env.backoffice_image_name }}"

