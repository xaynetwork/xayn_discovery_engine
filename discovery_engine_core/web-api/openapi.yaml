openapi: 3.0.3
info:
  title: Personalization API
  version: 1.0.0-rc1
  description: |-
    # Overview
    The API is divided 
  
    # Auth
    To authenticate with the API two bearer tokens will be provided. One will work for the
    personalization endpoints and the other one will allow documents to be added to the system.
    
tags:
  - name: users
    description: Interaction of the user and personalized document.
  - name: documents
    description: Managment of the documents in the system.

paths:
  /users/{user_id}/personalized_documents:
    get:
      tags:
        - users
      summary: Get personalized documents for the user
      description: |-
        Returns a map from `document_id` to the score of that document for the
        specified `user_id`. The score is a value between 0 and 1 where a higher value
        means that the document matches the preferences of the user better.
      parameters:
        - name: user_id
          in: path
          description: Id of the user
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - name: count
          in: query
          description: Maximum number of personalized documents to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizedDocumentsResponse'
        '400':
          description: invalid user id.
        '404':
          description: user not found.
        '422':
          description: impossible to create a personalized list for the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizedDocumentsError'

  /users/{user_id}/interactions:
    patch:
      tags:
        - users
      summary: Add interaction between a user and a document
      description: |-
        The interaction is used to provide personalized documents to the user.
      parameters:
        - name: user_id
          in: path
          description: Id of the user
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInteractionRequest'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid request. User or document id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInteractionError'

  /documents:
    post:
      tags:
        - documents
      summary: Add documents to the system
      description: |-
        Add documents to the system. The system will create a representation of the document
        that will be used to match it against the preferences of a user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionRequest'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid request
        '500':
          description: all or some of the documents were not successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionError'

components:
  schemas:
    DocumentId:
      description: A document id can be any non-empty UTF-8 string that does not contain the null byte.
      type: string
      example: "document id"
    DocumentProperties:
      description: Arbitrary properties that can be attached to a document.
      type: object
      example:
        title: "News title"
        image_url: "http://example.com/news_image.jpg"
        link: "http://example.com/this_news"
    UserId:
      description: A user id can be any non-empty UTF-8 string that does not contain the null byte.
      type: string
      example: "user id"
    PersonalizedDocumentData:
      type: object
      required: [id, score]
      properties:
        id:
          $ref: '#/components/schemas/DocumentId'
        score:
          type: number
        properties:
          $ref: '#/components/schemas/DocumentProperties'
    PersonalizedDocumentsResponse:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/PersonalizedDocumentData'
    PersonalizedDocumentsError:
      type: object
      required: [kind]
      properties:
        kind:
          type: string
    UserInteractionType:
      type: string
      enum: [positive]
    UserInteractionData:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DocumentId'
        type:
          $ref: '#/components/schemas/UserInteractionType'
    UserInteractionRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/UserInteractionData'
    UserInteractionError:
      type: object
      required: [kind]
      properties:
        kind:
          type: string
          enum: [invalid_user_id, invalid_document_id]
    IngestedDocument:
      type: object
      required: [id, snippet]
      properties:
        id:
          $ref: '#/components/schemas/DocumentId'
        snippet:
          description: Text that will be used to match the document against the user interests.
          type: string
        properties:
          $ref: '#/components/schemas/DocumentProperties'
    IngestionRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/IngestedDocument'
    IngestionError:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentId'
