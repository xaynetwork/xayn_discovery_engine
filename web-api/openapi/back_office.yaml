openapi: 3.1.0

info:
  title: Back Office API
  version: 2.5.0
  description: |-
    # Back Office
    This API acts as a create/read/update/delete interface for anything related to documents.

    ## Format
    All the request bodies in this API are JSON encoded and their `content-type` header should be set to `application/json`.

    ## Auth
    The API requires to set the `authorizationToken` header when used with the provided token.

    ## Document
    As a document we consider a cohesive text, for example a complete news article.
    However, we only require a simple representation for our system to work. Consisting just of a unique id, a text snippet, optional properties and optional tags.
    The text snippet is ideally a short, meaningful representation of the larger document, reduced to just one paragraph.

    ### Id
    The document id is a unique identifier for a single document.

    ### Snippet
    A snippet is a reduced representation of a larger text, for example if the document would be a news article, then its text would be the news article in a pure textual format.
    In order for our system to work correctly, it is important that the snippet is just the size of one or two paragraphs, and that the snippet's text clearly summarises the larger text.
    For example, let's take a news article which talks about the effects of inflation.
    Our snippet could then be: "Inflation worries as prices keep rising. People having budgetary difficulties as a result. Government pressured to take action.".
    A bad snippet would for example be just taking the very first paragraph of a document, which could sometimes work, but could also lead to:
    "December 20th 2020. Article written by Jane Doe. On this bright and sunny day, people might forget about their worries sometimes."

    ### Properties
    Properties are optional data for documents, which are usually needed to properly show the document back to the user, when it returns as a personalized document.
    If for example, you'd wish to integrate a type of carousel view, listing a total of 10 personalized documents in a "for you"-section, then you might choose to display each document as an image and title, with a url to link the user to when pressed.
    For this, you would need three document properties: `image`, `link` and `title`.

    ### Tags
    Tags are optional data for documents, which are used to improve the scoring in document searches. Each document can have multiple tags.
    For example, tags can be categories which the documents can be assigned to.
  x-logo:
    url: https://uploads-ssl.webflow.com/5ea197660b956f76d26f0026/637f7edd68c1ae2f12d4689e_Xayn%20Logo%202022%20-%20Footer.svg
    altText: Xayn
tags:
  - name: back office
    description: System management, including documents and properties.
    x-traitTag: true
  - name: documents
    x-displayName: Documents
  - name: candidates
    x-displayName: Document candidates
  - name: properties
    x-displayName: Document properties
  - name: property
    x-displayName: Document property
  - name: property indexing
    x-displayName: Document property indexing
x-tagGroups:
  - name: Documents
    tags:
      - documents
  - name: Document candidates
    tags:
      - candidates
  - name: Document properties
    tags:
      - properties
      - property
      - property indexing

security:
  - ApiKeyAuth: []

paths:
  /documents:
    post:
      tags:
        - back office
        - documents
      summary: Ingest documents
      description: |-
        Upsert documents to the system, which creates a representation of the document that will be used to match it against the preferences of a user.

        **Important note:** If you need to add more documents than the maximum batch size, then
        please split up the total amount of documents in separate calls.

        **Important note:** If a document id appears multiple times, only the last document with that id is retained.
      operationId: createDocuments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionRequest'
      responses:
        '201':
          $ref: './responses/generic.yml#/Created'
        '400':
          description: Validation (partially) failed, see `details`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionBadRequest'
        '500':
          description: Ingestion (partially) failed, see `details`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionError'
    delete:
      tags:
        - back office
        - documents
      summary: Delete documents
      description: Delete all listed documents.
      operationId: deleteDocuments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDocumentsRequest'
      responses:
        '204':
          description: Successful operation.
        '400':
          $ref: './responses/generic.yml#/BadRequest'

  /documents/_candidates:
    get:
      tags:
        - back office
        - candidates
      summary: Get document candidates
      description: Get the documents considered for recommendations.
      operationId: listDocumentCandidates
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentCandidatesResponse'
        '400':
          $ref: './responses/generic.yml#/BadRequest'
    put:
      tags:
        - back office
        - candidates
      summary: Set document candidates
      description: Set the documents considered for recommendations.
      operationId: replaceDocumentCandidates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCandidatesRequest'
      responses:
        '204':
          description: Successful operation.
        '400':
          $ref: './responses/generic.yml#/BadRequest'

  /documents/_indexed_properties:
    get:
      tags:
        - back office
        - property indexing
      summary: Get indexed properties
      description: Get the schema of all indexed properties.
      operationId: getIndexedPropertiesSchema
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexedPropertiesSchemaResponse'
    post:
      tags:
        - back office
        - property indexing
      summary: Add indexed properties
      description: |-
        Add additional indexed properties to the schema.

        The schema can have at most 11 properties in total, including the
        automatically created `publication_date` property.

        If you plan to create multiple indexed properties, it is strongly
        recommended to do so with one request.

        For now it is not possible to modify or delete indexed properties
        through the API.

        To use a property with query filters it is necessary to once add it to
        the list of indexed properties using this endpoint.

        Newly ingested documents are checked to be compatible with the indexed
        property schema, i.e. if they have a property in the schema it's value must
        be compatible (same type, in case of `date` a string in rfc3339 date time format).

        Due to technical limitation existing documents are not checked to be compatible
        with the new indexed properties added with this request. Incompatible documents will instead be
        treated as if they didn't had that property wrt. the filter/index. Besides that
        existing documents with matching properties are added to the index in a
        background job. Functionality to check the completion of that job is not yet
        implemented.
      operationId: createIndexedProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendIndexedPropertiesRequest'
      responses:
        '202':
          x-summary: Successful operation.
          description: |-
            The new complete indexed property schema is returned,
            though updating the index happens in a background job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexedPropertiesSchemaResponse'
        '400':
          $ref: './responses/generic.yml#/BadRequest'

  /documents/{document_id}:
    parameters:
      - $ref: './parameters/path/id.yml#/DocumentId'
    delete:
      tags:
        - back office
        - documents
      summary: Delete document
      description: Delete the listed document.
      operationId: deleteDocument
      responses:
        '204':
          description: Successful operation.
        '400':
          $ref: './responses/generic.yml#/BadRequest'

  /documents/{document_id}/properties:
    parameters:
      - $ref: './parameters/path/id.yml#/DocumentId'
    get:
      tags:
        - back office
        - properties
      summary: Get document properties
      description: Get all the properties of the document.
      operationId: listDocumentProperties
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertiesResponse'
        '400':
          $ref: './responses/generic.yml#/BadRequest'
    put:
      tags:
        - back office
        - properties
      summary: Set document properties
      description: Set or replace all the properties of the document.
      operationId: replaceDocumentProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertiesRequest'
      responses:
        '204':
          description: Successful operation.
        '400':
          $ref: './responses/generic.yml#/BadRequest'
    delete:
      tags:
        - back office
        - properties
      summary: Delete document properties
      description: Delete all the properties of the document.
      operationId: deleteDocumentProperties
      responses:
        '204':
          description: Successful operation.
        '400':
          $ref: './responses/generic.yml#/BadRequest'

  /documents/{document_id}/properties/{property_id}:
    parameters:
      - $ref: './parameters/path/id.yml#/DocumentId'
      - $ref: './parameters/path/id.yml#/DocumentPropertyId'
    get:
      tags:
        - back office
        - property
      summary: Get document property
      description: Get the property of the document.
      operationId: getDocumentProperty
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertyResponse'
        '400':
          $ref: './responses/generic.yml#/BadRequest'
    put:
      tags:
        - back office
        - property
      summary: Set document property
      description: Set or replace the property of the document.
      operationId: replaceDocumentProperty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertyRequest'
      responses:
        '204':
          description: Successful operation.
        '400':
          $ref: './responses/generic.yml#/BadRequest'
    delete:
      tags:
        - back office
        - property
      summary: Delete document property
      description: Delete the property of the document.
      operationId: deleteDocumentProperty
      responses:
        '204':
          description: Successful operation.
        '400':
          $ref: './responses/generic.yml#/BadRequest'

components:
  securitySchemes:
    ApiKeyAuth:
      $ref: './securitySchemes/auth.yml#/ApiKeyAuth'
  schemas:
    DocumentPropertyRequest:
      type: object
      required: [property]
      properties:
        property:
          $ref: './schemas/document.yml#/DocumentProperty'
    DocumentPropertyResponse:
      type: object
      required: [property]
      properties:
        property:
          $ref: './schemas/document.yml#/DocumentProperty'
      example:
        property: "Any valid json value"
    DocumentPropertiesRequest:
      type: object
      required: [properties]
      properties:
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
    DocumentPropertiesResponse:
      type: object
      required: [properties]
      properties:
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
      example:
        properties:
          title: "News title"
    ExtendIndexedPropertiesRequest:
      type: object
      required: [properties]
      properties:
        properties:
          $ref: './schemas/document.yml#/IndexedPropertiesSchema'
      example:
        properties:
          foo:
            type: keyword
          bar:
            type: date
    IndexedPropertiesSchemaResponse:
      type: object
      required: [properties]
      properties:
        properties:
         $ref: './schemas/document.yml#/IndexedPropertiesSchema'
      example:
        properties:
          foo:
            type: keyword
          bar:
            type: date
          publication_date:
            type: date
    IngestedDocument:
      type: object
      required: [id, snippet]
      # FIXME: valid schema, but I don't expect tooling to handle it properly
      #   How does this work?
      #     json-schema is defining directly validation rules but not data structures, through structures
      #       are implied by the validation rules.
      #     not required => validation succeeds if required validations fails, i.e. if all properties
      #                     listed in required are present
      not:
        required:
          - summarize
          - split
      properties:
        id:
          $ref: './schemas/document.yml#/DocumentId'
        snippet:
          description: |-
            Text that will be used to match the document against the user interests.
            Enclosing whitespace will be trimmed.
            The length constraints are in bytes, not characters.
            If `summarize` is enabled, then the length applies to the summarized instead of the original snippet.
          type: string
          minLength: 1
          maxLength: 2048
          pattern: '^[^\x00]+$'
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
        tags:
          description:
            $ref: './schemas/document.yml#/DocumentTag/description'
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: './schemas/document.yml#/DocumentTag'
        is_candidate:
          description: |-
            Indicates if the document is considered for recommendations.
            Always overwrites any existing `is_candidate` value from a previous ingestion.

            Setting both `is_candidate` and `default_is_candidate` is invalid.
            Setting neither will default to `is_candidate = true`.
          type: boolean
        default_is_candidate:
          description: |-
            Behaves like `is_candidate` but will not overwrite any existing `is_candidate`
            value already stored in the database for this document.

            Setting both `is_candidate` and `default_is_candidate` is invalid.
            Setting neither will default to `is_candidate = true`.
          type: boolean
        summarize:
          description: |-
            Summarize the document snippets before further processing.

            This is incompatible with `split`.
          type: boolean
          default: false
        split:
          description: |-
            Split the input documents into multiple parts.

            This is incompatible with `summarize`.
          type: boolean
          default: false
      example:
        id: document_1
        snippet: lorem ipsum delores
        properties:
          is_blue: true
        tags:
          - news
          - tech
        is_candidate: true
        summarize: false
    IngestionRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: '#/components/schemas/IngestedDocument'
      example:
        documents:
          - id: document_1
            snippet: lorem ipsum delores
            properties:
              is_blue: true
            tags:
              - news
              - tech
            is_candidate: false
          - id: document_2
            snippet: more lorem less ipsum
            tags:
              - exclusive
            default_is_candidate: false
          - id: document_3
            snippet: quite a lot of lines of lorem ipsum delores
            summarize: true
    IngestionBadRequest:
      allOf:
        - $ref: './schemas/error.yml#/GenericError'
        - type: object
          required: [details]
          properties:
            details:
              type: object
              required: [documents]
              properties:
                documents:
                  description: Validation of these documents failed.
                  type: array
                  minItems: 0
                  maxItems: 100
                  items:
                    type: object
                    required: [id]
                    properties:
                      id:
                        $ref: './schemas/document.yml#/DocumentId'
    IngestionError:
      allOf:
        - $ref: './schemas/error.yml#/GenericError'
        - type: object
          required: [details]
          properties:
            details:
              type: object
              required: [documents]
              properties:
                documents:
                  description: Ingestion of these documents failed.
                  type: array
                  minItems: 0
                  maxItems: 100
                  items:
                    type: object
                    required: [id]
                    properties:
                      id:
                        $ref: './schemas/document.yml#/DocumentId'
    DeleteDocumentsRequest:
      type: object
      required: [documents]
      properties:
        documents:
          description:
            $ref: './schemas/document.yml#/DocumentId/description'
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: './schemas/document.yml#/DocumentId'
    DocumentCandidate:
      type: object
      required: [id]
      properties:
        id:
          $ref: './schemas/document.yml#/DocumentId'
    DocumentCandidatesRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/DocumentCandidate'
    DocumentCandidatesResponse:
      type: object
      required: [documents]
      properties:
        documents:
          description:
            $ref: './schemas/document.yml#/DocumentId/description'
          type: array
          minItems: 0
          items:
            $ref: './schemas/document.yml#/DocumentId'
      example:
        documents:
          - 'document_id0'
