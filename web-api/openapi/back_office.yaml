openapi: 3.0.3
info:
  title: Back Office API
  version: 1.0.0-rc6
  description: |-
    # Back Office
    For this system, a document is anything that has an id, a snippet, and an arbitrary set of properties.
    The id uniquely identifies the document in the system.
    The system uses the snippet to create a document representation that can be matched against user interests.

    It is possible to attach any properties to a document; the system will not use them but will be returned together with the document when asking for personalized documents for a user. They could help store information like a title and the URL where it is possible to find the document. Each document can have its own set of properties.

    The API offers an endpoint that allows uploading the documents to the system. After a successful upload, it will be possible to use the document in other endpoints.

    # Auth
    To authenticate with the API, a token will be provided.

tags:
  - name: back office
    description: Management of the documents in the system.

security:
  - ApiKeyAuth: []

paths:
  /documents:
    post:
      tags:
        - back office
      summary: Add documents to the system
      description: |-
        Add documents to the system. The system will create a representation of the document
        that will be used to match it against the preferences of a user.
      operationId: createDocuments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionRequest'
      responses:
        '201':
          $ref: './responses/generic.yml#/Created'
        '400':
          $ref: './responses/generic.yml#/BadRequest'
        '500':
          description: all or some of the documents were not successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionError'
    delete:
      tags:
        - back office
      summary: Delete all listed documents.
      description: |-
        Delete all documents listed in the request body. The endpoint is
        idempotent. I.e. if the list contains one or multiple non-existing
        documents, no error is produced.
      operationId: deleteDocuments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDocumentsRequest'
      responses:
        '204':
          description: successful operation
        '400':
          $ref: './responses/generic.yml#/BadRequest'

  /documents/{document_id}:
    parameters:
      - $ref: './parameters/path/document_id.yml'
    delete:
      tags:
        - back office
      summary: Delete the document from the system.
      description: |-
        Permanently deletes the document from the system. The endpoint is
        idempotent. Deleting a non-existing document does not produce an error.
      operationId: deleteDocument
      responses:
        '204':
          description: successful operation
        '400':
          $ref: './responses/generic.yml#/BadRequest'

  /documents/{document_id}/properties:
    parameters:
      - $ref: './parameters/path/document_id.yml'
    get:
      tags:
        - back office
      summary: Get all document properties
      description: Gets all the properties of the document.
      operationId: listDocumentProperties
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertiesResponse'
        '400':
          $ref: './responses/generic.yml#/BadRequest'
    put:
      tags:
        - back office
      summary: Set all document properties
      description: Sets or replaces all the properties of the document.
      operationId: replaceDocumentProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertiesRequest'
      responses:
        '204':
          description: successful operation
        '400':
          $ref: './responses/generic.yml#/BadRequest'
    delete:
      tags:
        - back office
      summary: Delete all document properties
      description: Deletes all the properties of the document.
      operationId: deleteDocumentProperties
      responses:
        '204':
          description: successful operation
        '400':
          $ref: './responses/generic.yml#/BadRequest'

  /documents/{document_id}/properties/{property_id}:
    parameters:
      - $ref: './parameters/path/document_id.yml'
      - name: property_id
        in: path
        description: Id of the document property
        required: true
        schema:
          $ref: './schemas/document.yml#/DocumentPropertyId'
    get:
      tags:
        - back office
      summary: Get a document property
      description: Gets the property of the document.
      operationId: getDocumentProperty
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertyResponse'
        '400':
          $ref: './responses/generic.yml#/BadRequest'
    put:
      tags:
        - back office
      summary: Set a document property
      description: Sets or replaces the property of the document.
      operationId: replaceDocumentProperty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertyRequest'
      responses:
        '204':
          description: successful operation
        '400':
          $ref: './responses/generic.yml#/BadRequest'
    delete:
      tags:
        - back office
      summary: Delete a document property
      description: Deletes the property of the document.
      operationId: deleteDocumentProperty
      responses:
        '204':
          description: successful operation
        '400':
          $ref: './responses/generic.yml#/BadRequest'

components:
  securitySchemes:
    ApiKeyAuth:
      $ref: './securitySchemes/auth.yml#/ApiKeyAuth'
  schemas:
    DocumentPropertyRequest:
      type: object
      required: [property]
      properties:
        property:
          $ref: './schemas/document.yml#/DocumentProperty'
    DocumentPropertyResponse:
      type: object
      required: [property]
      properties:
        property:
          $ref: './schemas/document.yml#/DocumentProperty'
      example:
        property: "Any valid json value"
    DocumentPropertiesRequest:
      type: object
      required: [properties]
      properties:
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
    DocumentPropertiesResponse:
      type: object
      required: [properties]
      properties:
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
      example:
        properties:
          title: "News title"
    IngestedDocument:
      type: object
      required: [id, snippet]
      properties:
        id:
          $ref: './schemas/document.yml#/DocumentId'
        snippet:
          description: Text that will be used to match the document against the user interests.
          type: string
          minLength: 1
          maxLength: 1024
          pattern: '.+'
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
    IngestionRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: '#/components/schemas/IngestedDocument'
    IngestionError:
      allOf:
        - $ref: './schemas/error.yml#/GenericError'
        - type: object
          required: [details]
          properties:
            details:
              type: object
              required: [documents]
              properties:
                documents:
                  type: array
                  minItems: 0
                  maxItems: 100
                  items:
                    type: object
                    required: [id]
                    properties:
                      id:
                        $ref: './schemas/document.yml#/DocumentId'
    DeleteDocumentsRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: './schemas/document.yml#/DocumentId'
