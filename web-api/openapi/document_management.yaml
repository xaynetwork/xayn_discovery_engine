openapi: 3.0.3
info:
  title: Personalization API For Document Management
  version: 1.0.0-rc5
  description: |-
    # Documents management
    For this system, a document is anything that has an id, a snippet, and an arbitrary set of properties.
    The id uniquely identifies the document in the system.
    The system uses the snippet to create a document representation that can be matched against user interests.

    It is possible to attach any properties to a document; the system will not use them but will be returned together with the document when asking for personalized documents for a user. They could help store information like a title and the URL where it is possible to find the document. Each document can have its own set of properties.

    The API offers an endpoint that allows uploading the documents to the system. After a successful upload, it will be possible to use the document in other endpoints.

    # Auth
    To authenticate with the API, a token will be provided.

tags:
  - name: documents
    description: Management of the documents in the system.

security:
  - ApiKeyAuth: []    

paths:
  /documents:
    post:
      tags:
        - documents
      summary: Add documents to the system
      description: |-
        Add documents to the system. The system will create a representation of the document
        that will be used to match it against the preferences of a user.
      operationId: ingestDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionRequest'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid request
        '500':
          description: all or some of the documents were not successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionError'
    delete:
      tags:
        - documents
      summary: Delete all listed documents.
      description: |-
        Delete all documents listed in the request body. The endpoint is
        idempotent. I.e. if the list contains one or multiple non-existing
        documents, no error is produced.
      operationId: deleteDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDocumentsRequest'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid request

  /documents/{document_id}:
    delete:
      tags:
        - documents
      summary: Delete the document from the system.
      description: |-
        Permanently deletes the document from the system. The endpoint is
        idempotent. Deleting a non-existing document does not produce an error.
      operationId: deleteDocument
      parameters:
        - name: document_id
          in: path
          description: Id of the document
          required: true
          schema:
            $ref: './schemas/document.yml#/DocumentId'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid request

  /documents/{document_id}/properties:
    get:
      tags:
        - documents
      summary: Get all document properties
      description: Gets all the properties of the document.
      operationId: getDocumentProperties
      parameters:
        - name: document_id
          in: path
          description: Id of the document
          required: true
          schema:
            $ref: './schemas/document.yml#/DocumentId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertiesResponse'
        '400':
          description: invalid document id
        '404':
          description: document id not found
    put:
      tags:
        - documents
      summary: Set all document properties
      description: Sets or replaces all the properties of the document.
      operationId: setDocumentProperties
      parameters:
        - name: document_id
          in: path
          description: Id of the document
          required: true
          schema:
            $ref: './schemas/document.yml#/DocumentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertiesRequest'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid document id
        '404':
          description: document id not found
    delete:
      tags:
        - documents
      summary: Delete all document properties
      description: Deletes all the properties of the document.
      operationId: deleteDocumentProperties
      parameters:
        - name: document_id
          in: path
          description: Id of the document
          required: true
          schema:
            $ref: './schemas/document.yml#/DocumentId'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid document id
        '404':
          description: document id not found

  /documents/{document_id}/properties/{property_id}:
    get:
      tags:
        - documents
      summary: Get a document property
      description: Gets the property of the document.
      operationId: getDocumentProperty
      parameters:
        - name: document_id
          in: path
          description: Id of the document
          required: true
          schema:
            $ref: './schemas/document.yml#/DocumentId'
        - name: property_id
          in: path
          description: Id of the document property
          required: true
          schema:
            $ref: '#/components/schemas/DocumentPropertyId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPropertyResponse'
        '400':
          description: invalid document id or property id
        '404':
          description: document id or property id not found
    put:
      tags:
        - documents
      summary: Set a document property
      description: Sets or replaces the property of the document.
      operationId: setDocumentProperty
      parameters:
        - name: document_id
          in: path
          description: Id of the document
          required: true
          schema:
            $ref: './schemas/document.yml#/DocumentId'
        - name: property_id
          in: path
          description: Id of the document property
          required: true
          schema:
            $ref: '#/components/schemas/DocumentPropertyId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPropertyRequest'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid document id or property id
        '404':
          description: document id not found
    delete:
      tags:
        - documents
      summary: Delete a document property
      description: Deletes the property of the document.
      operationId: deleteDocumentProperty
      parameters:
        - name: document_id
          in: path
          description: Id of the document
          required: true
          schema:
            $ref: './schemas/document.yml#/DocumentId'
        - name: property_id
          in: path
          description: Id of the document property
          required: true
          schema:
            $ref: '#/components/schemas/DocumentPropertyId'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid document id or property id
        '404':
          description: document id or property id not found

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: authorizationToken
  schemas:
    DocumentPropertyId:
      description: |-
        A document property id can be any non-empty UTF-8 string that does not contain the null byte.
        It may consist of digits, Latin letters, underscores, colons, minus signs, at signs, and dots.
      type: string
      example: "document_property_id"
    DocumentPropertyRequest:
      type: object
      required: [property]
      properties:
        property:
          $ref: './schemas/document.yml#/DocumentProperty'
    DocumentPropertyResponse:
      type: object
      required: [property]
      properties:
        property:
          $ref: './schemas/document.yml#/DocumentProperty'
    DocumentPropertiesRequest:
      type: object
      required: [properties]
      properties:
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
    DocumentPropertiesResponse:
      type: object
      required: [properties]
      properties:
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
    BaseError:
      type: object
      required: [request_id, kind]
      properties:
        request_id:
          description: Request ID optionally generated from the service. It can be communicated to xayn to help debugging.
          type: string
        kind:
          description: What kind of error this is.
          type: string
        details:
          description: Additional error details. Might differ depending on debug options.
          type: object
    IngestedDocument:
      type: object
      required: [id, snippet]
      properties:
        id:
          $ref: './schemas/document.yml#/DocumentId'
        snippet:
          description: Text that will be used to match the document against the user interests.
          type: string
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
    IngestionRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/IngestedDocument'
    IngestionError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          required: [details]
          properties:
            details:
              type: object
              required: [documents]
              properties:
                documents:
                  type: array
                  items:
                    type: object
                    required: [id]
                    properties:
                      id:
                        $ref: './schemas/document.yml#/DocumentId'
    DeleteDocumentsRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          items:
            $ref: './schemas/document.yml#/DocumentId'
