openapi: 3.0.3
info:
  title: Front Office API
  version: 1.0.0-rc6
  description: |-
    # Front Office
    The system identifies a user with only an id.
    There are two main endpoints: one that allows registering an interaction between a user and a document (a user clicked or liked a document), and one to retrieve a personalized set of documents for the user. The system needs a few user interactions with documents before it can generate a personalized list.

    # Auth
    To authenticate with the API, a token will be provided.

tags:
  - name: front office
    description: Interaction of the user and personalized document.

security:
  - ApiKeyAuth: []    

paths:
  /users/{user_id}/personalized_documents:
    get:
      tags:
        - front office
      summary: Get personalized documents for the user
      description: |-
        Returns a list of documents personalized for the given `user_id`.
        Each document contains the id, the score and the properties that are attached to the document.
        The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better.
      operationId: getPersonalizedDocuments
      parameters:
        - $ref: './parameters/path/user_id.yml'
        - name: count
          in: query
          description: Maximum number of personalized documents to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizedDocumentsResponse'
        '400':
           $ref: './responses/generic.yml#/BadRequest'
        '409':
          description: impossible to create a personalized list for the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizedDocumentsError'

  /users/{user_id}/interactions:
    patch:
      tags:
        - front office
      summary: Add interaction between a user and a document
      description: |-
        The interaction is used to provide personalized documents to the user.
      operationId: updateUserInteractions
      parameters:
        - $ref: './parameters/path/user_id.yml'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInteractionRequest'
      responses:
        '204':
          description: successful operation
        '400':
          description: invalid request. User or document id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInteractionError'

components:
  securitySchemes:
    ApiKeyAuth:
      $ref: './securitySchemes/auth.yml#/ApiKeyAuth'
  schemas:
    PersonalizedDocumentData:
      type: object
      required: [id, score]
      properties:
        id:
          $ref: './schemas/document.yml#/DocumentId'
        score:
          type: number
        properties:
          $ref: './schemas/document.yml#/DocumentProperties'
    PersonalizedDocumentsResponse:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: '#/components/schemas/PersonalizedDocumentData'
      example:
        documents:
          - id: 'document_id0'
            score: 0.87
            properties:
              title: "News title"
    PersonalizedDocumentsError:
      allOf:
        - $ref: './schemas/error.yml#/GenericError'
        - type: object
          required: [kind]
          properties:
            kind:
              type: string
              enum: [NotEnoughInteractions]
    UserInteractionType:
      type: string
      enum: [Positive]
    UserInteractionData:
      type: object
      properties:
        id:
          $ref: './schemas/document.yml#/DocumentId'
        type:
          $ref: '#/components/schemas/UserInteractionType'
    UserInteractionRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: '#/components/schemas/UserInteractionData'
    UserInteractionError:
      allOf:
        - $ref: './schemas/error.yml#/GenericError'
        - type: object
          required: [kind]
          properties:
            kind:
              type: string
              enum: [InvalidUserId, InvalidDocumentId]
