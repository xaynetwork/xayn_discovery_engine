DocumentId:
  description: Id of a document.
  $ref: './id.yml#/Id'
  example: "document_id"

DocumentProperty:
  description: Arbitrary property that can be attached to a document.
  example: "News title"

DocumentProperties:
  description: Mostly arbitrary properties that can be attached to a document. A key must be a valid `DocumentPropertyId`.
  type: object
  properties:
    publication_date:
      $ref: './time.yml#/PublicationDate'
  additionalProperties: true
  example:
    title: "News title"
    image_url: "http://example.com/news_image.jpg"
    link: "http://example.com/this_news"

DocumentPropertyId:
  description: Id of a property of a document.
  $ref: './id.yml#/Id'
  example: "title"

DocumentTag:
  description: A tag of a document can be any non-empty, UTF-8-encoded string which doesn't contain a zero byte.
  type: string
  pattern: '^[^\x00]+$'
  minLength: 1
  maxLength: 256
  example: "tag"

DocumentSearchQuery:
  description: A search query can be any non-empty, UTF-8-encoded string which doesn't contain a zero byte.
  type: string
  pattern: ".+"
  minLength: 1
  maxLength: 512
  example: "what are the latest developments surrounding transformer models?"  

History:
  type: array
  minItems: 1
  maxItems: 100
  description: |-
    The history is an sequence of entries representing
    documents visited by the user.

    It is ordered from the  "oldest" interaction at index 0 to the "newest" interaction
    at the highest index.

    History entries do not need to have a timestamp, if no timestamp is given it is
    approximated in some way based on timestamps of neighboring documents and if non
    have a timestamp they are all assumed to have happened "just now" for simplicity.
  items:
    $ref: '#/HistoryEntry'

HistoryEntry:
  type: object
  properties:
    id:
      $ref: '#/DocumentId'
    timestamp:
      $ref: './time.yml#/Timestamp'

InputDocument:
  description: |
    Information about a document provided as input for an search.

    You can either include an existing Document's `id`, or use query which can hold arbitrary free text.
  type: object
  properties:
    id:
      $ref: '#/DocumentId'
    query:
      $ref: '#/DocumentSearchQuery'
